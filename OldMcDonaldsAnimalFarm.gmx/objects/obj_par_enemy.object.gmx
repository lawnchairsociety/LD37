<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize enemy base variables
enemy_health = 0;
enemy_spd = 0;
attack_damage = 0;
attack_modifier = 0;
attack_mod_chance = 0;
health_multiplier = 0;

move_to_destructor = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemy_current_health -= (obj_player.base_attack * obj_player.attack_multiplier);
alarm[1] = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status_duration = 0;
enemy_status_change = "NONE";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if no health, destroy
if (enemy_current_health &lt;= 0)
{
    instance_destroy();
}
else if(move_to_destructor)
{
    mp_potential_step(obj_destructor.x, obj_destructor.y, enemy_spd, false);
}
else
{
    /// move or attack
    if (enemy_status_change == "NONE")
    {
        if( instance_exists(barricade_weakness))
        {
            if (point_distance(x, y, barricade_weakness.x, barricade_weakness.y) &gt; floor(sprite_width * 1.5))
            {
                // move
                mp_potential_step(barricade_weakness.x, barricade_weakness.y, enemy_spd, false);
            }
            else
            {
                // eat :)
                var inst;
                inst = instance_position(barricade_weakness.x, barricade_weakness.y, barricade_weakness);
                inst.barricade_current_health -= (1 + attack_modifier);
            }
            
            // rotate
            image_angle = point_direction(x, y, barricade_weakness.x, barricade_weakness.y);
        }
        else
        {
            if (point_distance(x, y, obj_player.x, obj_player.y) &gt; floor(sprite_width * 1.5))
            {
                // move
                mp_potential_step(obj_player.x, obj_player.y, enemy_spd, false);
            }
            else
            {
                //attack
                obj_player.player_current_health -= (attack_damage * 0.05);
            }
            // rotate
            image_angle = point_direction(x, y, obj_player.x, obj_player.y);
        }
    }
    else if (enemy_status_change == "DOT" &amp;&amp; alarm_get(1) &lt;= 0)
    {
        // damage alarm
        alarm[1] = 1;
    }
    else if (enemy_status_change == "STUN")
    {
        // sit there and be stunned
    }
    else if (enemy_status_change == "SLOW")
    {
        if( instance_exists(barricade_weakness))
        {
            if (point_distance(x, y, barricade_weakness.x, barricade_weakness.y) &gt; floor(sprite_width * 1.5))
            {
                // move
                mp_potential_step(barricade_weakness.x, barricade_weakness.y, enemy_spd/4, false);
            }
            else
            {
                // eat :)
                var inst;
                inst = instance_position(barricade_weakness.x, barricade_weakness.y, barricade_weakness);
                inst.barricade_current_health -= (0.25 + attack_modifier);
            }
            
            // rotate
            image_angle = point_direction(x, y, barricade_weakness.x, barricade_weakness.y);
        }
        else
        {
            if (point_distance(x, y, obj_player.x, obj_player.y) &gt; floor(sprite_width * 1.5))
            {
                // move
                mp_potential_step(obj_player.x, obj_player.y, enemy_spd/4, false);
            }
            else
            {
                //attack
                obj_player.player_current_health -= (attack_damage * 0.0125);
            }
            
            // rotate
            image_angle = point_direction(x, y, obj_player.x, obj_player.y);
        }
    }
    else if (enemy_status_change == "RAGE")
    {
        if( instance_exists(obj_par_enemy))
        {
            if (point_distance(x, y, obj_par_enemy.x, obj_par_enemy.y) &gt; floor(sprite_width * 1.5))
            {
                // move
                mp_potential_step(obj_par_enemy.x, obj_par_enemy.y, enemy_spd, false);
            }
            else
            {
                // attack :)
                var inst;
                inst = instance_position(obj_par_enemy.x, obj_par_enemy.y, obj_par_enemy);
                inst.enemy_current_health -= (1.25 * attack_modifier);
            }
            
            // rotate
            image_angle = point_direction(x, y, obj_par_enemy.x, obj_par_enemy.y);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_object(obj_player) &lt; sprite_width &amp;&amp; distance_to_point(mouse_x, mouse_y) &lt; 2)
{
    enemy_current_health -= (obj_player.base_attack * obj_player.attack_multiplier);
    
    if (irandom(obj_player.status_effect_chance) == obj_player.status_effect_chance)
    {
        enemy_status_change = obj_player.status_effect;
        status_duration = obj_player.status_duration;
        alarm[0] = status_duration * room_speed;
    }
    
    if (obj_player.current_weapon != obj_hands)
        obj_player.current_durability -= 1;
    
    obj_player.current_enemy_name = id;
    obj_player.current_enemy_health = enemy_current_health;
}

/// if no health, destroy
if (enemy_current_health &lt;= 0)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
