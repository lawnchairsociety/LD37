<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>main_menu[0] = "Start";
main_menu[1] = "Quit";

start_menu[0] = "Easy";
start_menu[1] = "Medium";
start_menu[2] = "Hard";
start_menu[3] = "DEATH MODE";
start_menu[4] = "Back";

menus[0] = main_menu;
menus[1] = start_menu;

space = 32;
menu_position = 0;
which_menu = 0;

cursor_sprite = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var move = 0;
move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0); 
move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);

if (move != 0)
{
    menu_position += move;
    if (menu_position &lt; 0)
        menu_position = array_length_1d(menus[which_menu]) - 1;
    if (menu_position &gt; array_length_1d(menus[which_menu]) - 1)
        menu_position = 0;
}

var push = max(keyboard_check_released(vk_space), keyboard_check_released(vk_enter), 0);

if (push == 1)
{
    if (which_menu == 0)
    {
        // main menu
        switch(menu_position)
        {
            case 0:
                which_menu = 1;
                menu_position = 0;
                break;
            case 1:
                game_end();
        }
    }
    else if (which_menu == 1)
    {
        // start menu
        switch(menu_position)
        {
            case 0:
                global.game_level = 0;
                room_goto(rm_barn);
                break;
            case 1:
                global.game_level = 1;
                room_goto(rm_barn);
                break;
            case 2:
                global.game_level = 2;
                room_goto(rm_barn);
                break;
            case 3:
                global.game_level = 666;
                room_goto(rm_barn);
                break;
            case 4:
                global.game_level = 0;
                which_menu = 0;
                menu_position = 0;
                break;
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (which_menu != 2)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
}
else
{
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
}

draw_set_font(fnt_pixel);
draw_set_color(c_white);

text_x = view_wview[0] / 2;
text_y = view_wview[0] / 2;

current_menu = menus[which_menu];

var m;
for (m = 0; m &lt; array_length_1d(current_menu); m++)
{
    if (menu_position == m)
        draw_set_color(c_yellow);
    
    draw_text(text_x, text_y + (m * space), string(current_menu[m]));
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
